name: Docker Image and Deploy

on:
  workflow_call:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Setup QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 2. Setup Docker Buildx for multi-arch builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_GITHUB_TOKEN }}

      # 4. Build and push Docker image to GitHub Container Registry
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}/app:${{ github.sha }}

      # 5. Authenticate with Google Cloud
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/70756149774/locations/global/workloadIdentityPools/github-actions/providers/github-repos'
          service_account: 'hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com'

      # 6. Install Skopeo
      - name: Install Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      # 7. Copy Image with Skopeo to GCR
      - name: Copy Image to GCR
        run: |
          skopeo copy \
            --src-creds "${{ github.actor }}:${{ secrets.MY_GITHUB_TOKEN }}" \
            docker://ghcr.io/${{ github.repository }}/app:${{ github.sha }} \
            docker://gcr.io/hs-heilbronn-devsecops/app:${{ github.sha }}

      # 8. Deploy to Cloud Run
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: note-api-hs-heilbronn-devsecops
          image: gcr.io/hs-heilbronn-devsecops/app:${{ github.sha }}
          region: europe-west3
          env_vars: BACKEND=memory
